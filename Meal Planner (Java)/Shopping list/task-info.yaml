type: edu
files:
  - name: src/mealplanner/Main.java
    visible: true
    text: |-
      package mealplanner;
      
      public class Main {
        public static void main(String[] args) {
          System.out.println("Hello World!");
        }
      }
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      repositories {
          mavenCentral()
      }
      
      dependencies {
          implementation 'org.postgresql:postgresql:42.2.27'
      }
    learner_created: false
  - name: test/MealPlannerTests.java
    visible: false
    text: |-
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      import java.io.File;
      import java.sql.*;
      import java.util.*;
      
      class Column {
        public String first;
        public String second;
      
        public Column(String first, String second) {
          this.first = first;
          this.second = second;
        }
      
        @Override
        public boolean equals(Object o) {
          if (this == o) return true;
          if (o == null || getClass() != o.getClass()) return false;
          Column column = (Column) o;
          return Objects.equals(first, column.first) && Objects.equals(second, column.second);
        }
      
        @Override
        public int hashCode() {
          return Objects.hash(first, second);
        }
      }
      
      class dbTable {
        String name;
        List<Column> columnNameType;
      
        public dbTable(String name, List<Column> columnNameType) {
          this.name = name;
          this.columnNameType = columnNameType;
        }
      }
      
      class MyMealTestData {
        String mealCategory;
        String mealName;
        String[] ingredients;
      
        MyMealTestData(String mealCategory, String mealName, String[] ingredients) {
          this.mealCategory = mealCategory;
          this.mealName = mealName;
          this.ingredients = ingredients;
        }
      }
      
      public class MealPlannerTests extends StageTest {
      
        static final String DB_URL = "jdbc:postgresql:meals_db";
        static final String USER = "postgres";
        static final String PASS = "1111";
      
        String[] days = new String[]{"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
      
        static final MyMealTestData[] mealsList = new MyMealTestData[]{
                new MyMealTestData("breakfast", "scrambled eggs", new String[]{"eggs", "milk", "cheese"}),
                new MyMealTestData("breakfast", "sandwich", new String[]{"bread", "cheese", "ham"}),
                new MyMealTestData("breakfast", "oatmeal", new String[]{"oats", "milk", "banana", "peanut butter"}),
                new MyMealTestData("breakfast", "english breakfast", new String[]{"eggs", "sausages", "bacon", "tomatoes",
                        "bread"}),
                new MyMealTestData("lunch", "sushi", new String[]{"salmon", "rice", "avocado"}),
                new MyMealTestData("lunch", "chicken salad", new String[]{"chicken", "lettuce", "tomato", "olives"}),
                new MyMealTestData("lunch", "omelette", new String[]{"eggs", "milk", "cheese"}),
                new MyMealTestData("lunch", "salad", new String[]{"lettuce", "tomato", "onion", "cheese", "olives"}),
                new MyMealTestData("dinner", "pumpkin soup", new String[]{"pumpkin", "coconut milk", "curry", "carrots"}),
                new MyMealTestData("dinner", "beef steak", new String[]{"beef steak"}),
                new MyMealTestData("dinner", "pizza", new String[]{"flour", "tomato", "cheese", "salami"}),
                new MyMealTestData("dinner", "tomato soup", new String[]{"tomato", "orzo"})
        };
      
        void checkTableSchema(List<dbTable> tables) {
          try {
            Connection connection = DriverManager.getConnection(DB_URL, USER, PASS);
            DatabaseMetaData meta = connection.getMetaData();
            for (dbTable table : tables) {
              ResultSet tableMeta = meta.getTables(null, null, table.name, null);
              if (!tableMeta.next() || !table.name.equalsIgnoreCase(tableMeta.getString("TABLE_NAME"))) {
                throw new WrongAnswer("The table \"" + table.name + "\" doesn't exist.");
              }
              ResultSet columns = meta.getColumns(null, null, table.name, null);
              List<Column> columnsData = new ArrayList<>();
              while (columns.next()) {
                Column column = new Column(
                        columns.getString("COLUMN_NAME").toLowerCase(),
                        columns.getString("TYPE_NAME").toLowerCase());
                columnsData.add(column);
              }
              for (Column c : table.columnNameType) {
                if (!columnsData.contains(c)) {
                  for (Column c2 : columnsData) {
                    if (c.first.equals(c2.first)) {
                      throw new WrongAnswer("The column \"" + c.first + "\" of the table \"" + table.name + "\" is of the " +
                              "wrong type.");
                    }
                  }
                  throw new WrongAnswer("The column \"" + c.first + "\" of the table \"" + table.name + "\" doesn't exist.");
                }
              }
            }
            connection.close();
          } catch (Exception e) {
            throw new WrongAnswer("An exception was thrown, while trying to check the database schema - " + e.getMessage());
          }
        }
      
        void checkConnection() {
          try {
            Class.forName("org.postgresql.Driver");
          } catch (ClassNotFoundException e) {
            throw new WrongAnswer("An exception was thrown, while trying to connect to database. PostgreSQL JDBC Driver is " +
                    "not found.");
          }
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (SQLException e) {
            throw new WrongAnswer("An exception was thrown, while trying to connect to database. Connection Failed");
          }
      
          if (connection == null) {
            throw new WrongAnswer("Failed to make connection to database");
          }
        }
      
        @DynamicTest(order = 0)
        public CheckResult normalExe21Test() {
      
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
          try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DROP TABLE if exists plan");
            statement.executeUpdate("DROP TABLE if exists ingredients");
            statement.executeUpdate("DROP TABLE if exists meals");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to drop tables - " + e);
          }
      
          CheckOutput co = new CheckOutput();
          if (!co.start("What would you like to do (add, show, plan, save, exit)?"))
            return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, save," +
                    " exit)?\"");
          ArrayList<dbTable> tables = new ArrayList<>(Arrays.asList(
                  new dbTable("ingredients", new ArrayList<>(
                          Arrays.asList(
                                  new Column("ingredient", "varchar"),
                                  new Column("ingredient_id", "int4"),
                                  new Column("meal_id", "int4")
                          )
                  )),
                  new dbTable("meals", new ArrayList<>(
                          Arrays.asList(
                                  new Column("category", "varchar"),
                                  new Column("meal", "varchar"),
                                  new Column("meal_id", "int4")
                          )
                  ))
          ));
          checkTableSchema(tables);
      
          if (!co.input("save", "Unable to save. Plan your meals first."))
            return CheckResult.wrong("Your output should contain \"Unable to save. Plan your meals first.\"");
      
          if (!co.input("exit", "Bye!"))
            return CheckResult.wrong("Your output should contain \"Bye!\"");
          if (!co.programIsFinished())
            return CheckResult.wrong("The application didn't exit.");
          return CheckResult.correct();
        }
      
        @DynamicTest(order = 1)
        public CheckResult normalExe16Test() {
      
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
          try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DROP TABLE if exists plan");
            statement.executeUpdate("DROP TABLE if exists ingredients");
            statement.executeUpdate("DROP TABLE if exists meals");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to drop tables - " + e);
          }
      
          CheckOutput co = new CheckOutput();
          if (!co.start("What would you like to do (add, show, plan, save, exit)?"))
            return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, save," +
                    " exit)?\"");
          ArrayList<dbTable> tables = new ArrayList<>(Arrays.asList(
                  new dbTable("ingredients", new ArrayList<>(
                          Arrays.asList(
                                  new Column("ingredient", "varchar"),
                                  new Column("ingredient_id", "int4"),
                                  new Column("meal_id", "int4")
                          )
                  )),
                  new dbTable("meals", new ArrayList<>(
                          Arrays.asList(
                                  new Column("category", "varchar"),
                                  new Column("meal", "varchar"),
                                  new Column("meal_id", "int4")
                          )
                  ))
          ));
          checkTableSchema(tables);
      
          if (!co.input("exit", "Bye!"))
            return CheckResult.wrong("Your output should contain \"Bye!\"");
          if (!co.programIsFinished())
            return CheckResult.wrong("The application didn't exit.");
          return CheckResult.correct();
        }
      
        @DynamicTest(order = 2)
        CheckResult normalExe17Test() {
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
          try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DROP TABLE if exists plan");
            statement.executeUpdate("DROP TABLE if exists ingredients");
            statement.executeUpdate("DROP TABLE if exists meals");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to drop tables - " + e);
          }
      
          try {
            CheckOutput co = new CheckOutput();
            if (!co.start("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "save, " +
                      "exit)?\"");
      
            if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, dinner)" +
                      "?\"");
      
            if (!co.input("lunch", "Input the meal's name:"))
              return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");
      
            if (!co.input("sushi", "Input the ingredients:"))
              return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");
      
            if (!co.input("salmon, rice, avocado", "The meal has been added!"))
              return CheckResult.wrong("Your output should contain \"The meal has been added!\"");
      
            if (!co.inputNext("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "save, " +
                      "exit)?\"");
      
            if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, dinner)" +
                      "?\"");
      
            if (!co.input("lunch", "Input the meal's name:"))
              return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");
      
            if (!co.input("omelette", "Input the ingredients:"))
              return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");
      
            if (!co.input("eggs, milk, cheese", "The meal has been added!"))
              return CheckResult.wrong("Your output should contain \"The meal has been added!\"");
      
            if (!co.inputNext("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "save, " +
                      "exit)?\"");
      
            if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, dinner)" +
                      "?\"");
      
            if (!co.input("breakfast", "Input the meal's name:"))
              return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");
      
            if (!co.input("oatmeal", "Input the ingredients:"))
              return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");
      
            if (!co.input("oats, milk, banana, peanut butter", "The meal has been added!"))
              return CheckResult.wrong("Your output should contain \"The meal has been added!\"");
      
            if (!co.inputNext("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "save, " +
                      "exit)?\"");
      
            if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                      "lunch, dinner)?\"");
      
            if (!co.input("lunch", "Category: lunch", "Name: sushi", "Ingredients:", "salmon", "rice", "avocado",
                    "Name: omelette", "Ingredients:", "eggs", "milk", "cheese"))
              return CheckResult.wrong("Wrong \"show\" output for a saved meal.");
      
            if (!co.inputNext("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "save, " +
                      "exit)?\"");
      
            if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                      "lunch, dinner)?\"");
      
            if (!co.input("breakfast", "Category: breakfast", "Name: oatmeal", "Ingredients:", "oats",
                    "milk", "banana", "peanut butter"))
              return CheckResult.wrong("Wrong \"show\" output for a saved meal.");
      
            if (!co.inputNext("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "save, " +
                      "exit)?\"");
      
            if (!co.input("exit", "Bye!"))
              return CheckResult.wrong("Your output should contain \"Bye!\"");
      
            if (!co.programIsFinished())
              return CheckResult.wrong("The application didn't exit.");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown while testing - " + e);
          }
      
          return CheckResult.correct();
        }
      
        @DynamicTest(order = 3)
        CheckResult normalExe18Test() {
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
      
          try {
            CheckOutput co = new CheckOutput();
            if (!co.start("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "save, " +
                      "exit)?\"");
      
            if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                      "lunch, dinner)?\"");
      
            if (!co.input("lunch", "Category: lunch", "Name: sushi", "Ingredients:", "salmon", "rice", "avocado",
                    "Name: omelette", "Ingredients:", "eggs", "milk", "cheese"))
              return CheckResult.wrong("Wrong \"show\" output for a saved meal.");
      
            if (!co.inputNext("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "save, " +
                      "exit)?\"");
      
            if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                      "lunch, dinner)?\"");
      
            if (!co.input("breakfast", "Category: breakfast", "Name: oatmeal", "Ingredients:", "oats",
                    "milk", "banana", "peanut butter"))
              return CheckResult.wrong("Wrong \"show\" output for a saved meal.");
      
            if (!co.inputNext("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "save, " +
                      "exit)?\"");
      
            if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                      "lunch, dinner)?\"");
      
            if (!co.input("brunch", "Wrong meal category! Choose from: breakfast, lunch, dinner."))
              return CheckResult.wrong("Wrong output after the input of a category that doesn't exist.");
      
            if (!co.input("dinner", "No meals found."))
              return CheckResult.wrong("Wrong output for a category with no added meals.");
      
            if (!co.input("exit", "Bye!"))
              return CheckResult.wrong("Your output should contain \"Bye!\"");
      
            if (!co.programIsFinished())
              return CheckResult.wrong("The application didn't exit.");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown while testing - " + e);
          }
      
          return CheckResult.correct();
        }
      
        @DynamicTest(order = 4)
        CheckResult normalExe19Test() {
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
          try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DROP TABLE if exists ingredients");
            statement.executeUpdate("DROP TABLE if exists plan");
            statement.executeUpdate("DROP TABLE if exists meals");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to drop tables - " + e);
          }
      
          try {
            CheckOutput co = new CheckOutput();
            if (!co.start("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "save, " +
                      "exit)?\"");
      
      
            for (MyMealTestData meal : mealsList) {
              if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
                return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, " +
                        "dinner)?\"");
      
              if (!co.input(meal.mealCategory, "Input the meal's name:"))
                return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");
      
              if (!co.input(meal.mealName, "Input the ingredients:"))
                return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");
      
              if (!co.input(String.join(",", meal.ingredients), "The meal has been added!"))
                return CheckResult.wrong("Your output should contain \"The meal has been added!\"");
      
              if (!co.inputNext("What would you like to do (add, show, plan, save, exit)?"))
                return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                        "save, " +
                        "exit)?\"");
      
            }
      
            co.getNextOutput("plan");
            int index = 0;
            for (String day : days) {
              if (!co.inputNext(day))
                return CheckResult.wrong("Your output should contain \"" + day + "\"");
      
              String[] categories = new String[]{"breakfast", "lunch", "dinner"};
              String[][] alphabetic = {
                      new String[]{"english breakfast", "oatmeal", "sandwich", "scrambled eggs"},
                      new String[]{"chicken salad", "omelette", "salad", "sushi"},
                      new String[]{"beef steak", "pizza", "pumpkin soup", "tomato soup"}
              };
              for (int i = 0; i < 3; i++) {
                String category = categories[i];
                if (!co.inputNext(alphabetic[i]))
                  return CheckResult.wrong("Make sure that formatting of your output is similar to the one in the example. " +
                          "Also, your output should contain the meals in alphabetic order.");
      
                if (!co.inputNext("Choose the " + category + " for " + day + " from the list above:"))
                  return CheckResult.wrong("Your output should contain the prompt for the " + category + " meal.");
      
                if (!co.input("nonExistMeal", "This meal doesn’t exist. Choose a meal from the list above."))
                  return CheckResult.wrong("Your output should contain \"This meal doesn’t exist. Choose a meal from the " +
                          "list above.\"");
      
                co.getNextOutput(((MyMealTestData) (Arrays.stream(mealsList).filter(x -> x.mealCategory.equals(category)).toArray()[index % 4])).mealName);
              }
              if (!co.inputNext("Yeah! We planned the meals for " + day + "."))
                return CheckResult.wrong("Your output should contain \"Yeah! We planned the meals for " + day + ".\".");
              index++;
            }
      
            String[] planPrintout = new String[]{"Monday", "Breakfast: scrambled eggs", "Lunch: sushi", "Dinner: pumpkin " +
                    "soup",
                    "Tuesday", "Breakfast: sandwich", "Lunch: chicken salad", "Dinner: beef steak",
                    "Wednesday", "Breakfast: oatmeal", "Lunch: omelette", "Dinner: pizza",
                    "Thursday", "Breakfast: english breakfast", "Lunch: salad", "Dinner: tomato soup",
                    "Friday", "Breakfast: scrambled eggs", "Lunch: sushi", "Dinner: pumpkin soup",
                    "Saturday", "Breakfast: sandwich", "Lunch: chicken salad", "Dinner: beef steak",
                    "Sunday", "Breakfast: oatmeal", "Lunch: omelette", "Dinner: pizza"};
      
            for (String line : planPrintout) {
              if (!co.inputNext(line))
                return CheckResult.wrong("Your output should contain \"" + line + "\".");
            }
      
            if (!co.input("exit", "Bye!"))
              return CheckResult.wrong("Your output should contain \"Bye!\"");
      
            if (!co.programIsFinished())
              return CheckResult.wrong("The application didn't exit.");
      
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown while testing - " + e);
          }
      
          return CheckResult.correct();
        }
      
        @DynamicTest(order = 5)
        CheckResult normalExe20Test() {
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
      
          try {
            CheckOutput co = new CheckOutput();
            if (!co.start("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong(
                      "Your program should ask the user about the required action: \"(add, show, plan, save, exit)?\"");
      
            if (!co.input("save", "Input a filename:"))
              return CheckResult.wrong("Your output should contain: \"Input a filename:\"");
      
            if (!co.input("plan.txt", "Saved!"))
              return CheckResult.wrong("Your output should contain: \"Saved!\"");
      
            if (!co.inputNext("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong(
                      "Your program should ask the user about the required action: \"(add, show, plan, save, exit)?\"");
      
            File ingredientsFile = new File("plan.txt");
            if (!ingredientsFile.exists())
              return CheckResult.wrong("The ingredient file doesn't exist.");
      
            List<String> ingredientsInPlan = new ArrayList<>(List.of(
                    "avocado x2", "bacon", "banana x2", "beef steak x2", "bread x3", "carrots x2",
                    "cheese x9", "chicken x2", "coconut milk x2", "curry x2", "eggs x5",
                    "flour x2", "ham x2", "lettuce x3", "milk x6", "oats x2", "olives x3",
                    "onion", "orzo", "peanut butter x2", "pumpkin x2", "rice x2", "salami x2",
                    "salmon x2", "sausages", "tomato x6", "tomatoes"));
            Scanner scanner = new Scanner(ingredientsFile);
            while(scanner.hasNext()){
              String line = scanner.nextLine();
              if (!ingredientsInPlan.contains(line))
                return CheckResult.wrong("There is no ingredient \""+line+"\" in plan");
              ingredientsInPlan.remove(line);
            }
            if(!ingredientsInPlan.isEmpty())
              return CheckResult.wrong("Ingredient \""+ingredientsInPlan.get(0)+"\" doesn't exist in file.");
      
            if (!co.input("exit", "Bye!"))
              return CheckResult.wrong("Your output should contain \"Bye!\"");
      
            if (!co.programIsFinished())
              return CheckResult.wrong("The application didn't exit.");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown while testing - "+e);
          }
      
          return CheckResult.correct();
        }
      }
      
      
      class CheckOutput {
        private TestedProgram main = new TestedProgram();
        private int position = 0;
        private boolean caseInsensitive = true;
        private boolean trimOutput = true;
        private List<String> arguments = new ArrayList<>();
        private boolean isStarted = false;
        private String lastOutput = "";
      
        private boolean checkOutput(String outputString, String... checkStr) {
          int searchPosition = position;
          for (String cStr : checkStr) {
            String str = caseInsensitive ? cStr.toLowerCase() : cStr;
            int findPosition = outputString.indexOf(str, searchPosition);
            if (findPosition == -1) return false;
            if (!outputString.substring(searchPosition, findPosition).isBlank()) return false;
            searchPosition = findPosition + str.length();
          }
          position = searchPosition;
          return true;
        }
      
        public boolean start(String... checkStr) {
          if (isStarted)
            return false;
          var outputString = main.start(arguments.toArray(new String[]{}));
          lastOutput = outputString;
          if (trimOutput) outputString = outputString.trim();
          if (caseInsensitive) outputString = outputString.toLowerCase();
          isStarted = true;
          return checkOutput(outputString, checkStr);
        }
      
        public void stop() {
          main.stop();
        }
      
        public boolean input(String input, String... checkStr) {
          if (main.isFinished()) return false;
          String outputString = main.execute(input);
          lastOutput = outputString;
          if (trimOutput) outputString = outputString.trim();
          if (caseInsensitive) outputString = outputString.toLowerCase();
          position = 0;
          return checkOutput(outputString, checkStr);
        }
      
        public boolean inputNext(String... checkStr) {
          String outputString = lastOutput;
          if (trimOutput) outputString = outputString.trim();
          if (caseInsensitive) outputString = outputString.toLowerCase();
          return checkOutput(outputString, checkStr);
        }
      
        public String getNextOutput(String input) {
          if (main.isFinished()) return "";
          String outputString = main.execute(input);
          lastOutput = outputString;
          position = 0;
          return outputString;
        }
      
        public String getLastOutput() {
          return lastOutput;
        }
      
        public boolean programIsFinished() {
          return main.isFinished();
        }
      
        public void setArguments(String... arguments) {
          this.arguments = Arrays.stream(arguments).toList();
        }
      
        public void setCaseInsensitive(boolean caseInsensitive) {
          this.caseInsensitive = caseInsensitive;
        }
      
        public void setTrimOutput(boolean trimOutput) {
          this.trimOutput = trimOutput;
        }
      }
    learner_created: false
  - name: src/mealplanner/DayPlan.java
    visible: true
    text: |
      package mealplanner;
      
      
      import java.util.List;
      import java.util.Objects;
      
      public class DayPlan {
          DayOfWeek day;
          MealCategory mealCategory;
          String mealName;
          Meal meal;
      
      
      
      
          DayPlan(DayOfWeek day, MealCategory mealCategory, String mealName) {
              this.day = day;
              this.mealCategory = mealCategory;
              this.mealName = mealName;
          }
      
          static void printDayPlanArray(List<DayPlan> dayPlanList) {
              String printingDay = null;
              for (DayPlan dayPlan : dayPlanList) {
                  if (!Objects.equals(printingDay, dayPlan.day.toString())) {
                      System.out.println();
                      System.out.println(dayPlan.day);
                  }
      
                  System.out.println(dayPlan.mealCategory.toString().substring(0, 1).toUpperCase() +
                          dayPlan.mealCategory.toString().substring(1).toLowerCase() + ": " + dayPlan.mealName);
      
                  printingDay = dayPlan.day.toString();
      
              }
      
          }
      
          DayPlan(DayOfWeek day, Meal meal) {
              this.day = day;
              this.mealCategory = meal.category;
              this.mealName = meal.name;
              this.meal = meal;
          }
      
          public void printDayPlan() {
              System.out.println(this.day);
              System.out.println(mealCategory.toString().substring(0, 1).toUpperCase() +
                      mealCategory.toString().substring(1).toLowerCase() + ": " + this.mealName);
      
      
          }
      
      
      }
    learner_created: true
  - name: src/mealplanner/DayOfWeek.java
    visible: true
    text: |
      package mealplanner;
      
      public enum DayOfWeek {
          Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
      }
    learner_created: true
  - name: src/mealplanner/Meal.java
    visible: true
    text: |+
      package mealplanner;
      
      import java.util.ArrayList;
      
      public class Meal {
          String name;
          MealCategory category;
          ArrayList<String> ingredients;
          int id;
      
          Meal(String name, MealCategory category, ArrayList<String> ingredients) {
              this.name = name;
              this.category = category;
              this.ingredients = ingredients;
      
          }
      
          Meal(int id, String name, MealCategory category, ArrayList<String> ingredients) {
              this.id = id;
              this.name = name;
              this.category = category;
              this.ingredients = ingredients;
      
          }
      
          public void printMeal() {
              System.out.println();
              System.out.printf("Name: %s\n", this.name);
              System.out.println("Ingredients:");
              for (String s : this.ingredients) {
                  System.out.println(s);
              }
          }
      
      
          public void setId(int id) {
              this.id = id;
          }
      
          public String getName() {
              return this.name;
          }
      
          public int getId() {
              return this.id;
          }
      
          private static final String regexIngredients = "^(?!\\s*$)([\\p{L}\\s]+)+$";
      
          public static boolean verifyIngredients(String[] ingredients) {
              boolean isValid = true;
              for (String ingredient: ingredients) {
                  if (!ingredient.matches(regexIngredients)) {
                      isValid = false;
                      break;
                  }
              }
              return isValid;
          }
      
      
      }
    
    
    learner_created: true
  - name: src/mealplanner/DbMealsDao.java
    visible: true
    text: |
      package mealplanner;
      
      import java.sql.*;
      import java.util.ArrayList;
      import java.util.Arrays;
      import java.util.List;
      import java.util.Objects;
      
      public class DbMealsDao implements MealsDao {
      
          private static final String CONNECTION_URL = "jdbc:postgresql://localhost:5432/meals_db";
          private static final String USER = "postgres";
          private static final String PASSWORD = "1111";
          private static final Connection connection;
      
          static {
              try {
                  connection = DriverManager.getConnection(CONNECTION_URL, USER, PASSWORD);
              } catch (SQLException e) {
                  throw new RuntimeException(e);
              }
          }
      
      
          public DbMealsDao() throws SQLException {
          }
      
      
          @Override
          public List<Meal> findAll() throws SQLException {
              ArrayList<Meal> meals = new ArrayList<>();
              Statement statement = connection.createStatement();
              ResultSet rs = statement.executeQuery("SELECT meal_id, meal_category, meal_name, ingredients FROM meals_view;");
      
              while (rs.next()) {
                  Meal meal = new Meal(
                          rs.getInt("meal_id"),
                          rs.getString("meal_name"),
                          MealCategory.valueOf(rs.getString("meal_category")),
                          new ArrayList<>(Arrays.asList((String[]) rs.getArray("ingredients").getArray()))
      
                  );
                  meals.add(meal);
              }
              return meals;
          }
      
          @Override
          public void createRelations() throws SQLException {
             Statement statement = connection.createStatement();
      
      
      //        statement.executeUpdate("DROP TABLE IF EXISTS ingredients;");
      //        statement.executeUpdate("DROP TABLE IF EXISTS plan;");
      //        statement.executeUpdate("DROP TABLE IF EXISTS meals;");
              this.dropViews();
      
      
              statement.executeUpdate("CREATE TABLE IF NOT EXISTS meals (" +
                      "meal_id integer," +
                      "category varchar," +
                      "meal varchar, " +
                      "PRIMARY KEY(meal_id)" +
                      ");");
      
      
              statement.executeUpdate("CREATE TABLE IF NOT EXISTS ingredients (" +
                      "ingredient_id integer," +
                      "ingredient varchar," +
                      "meal_id integer, " +
                      "PRIMARY KEY(ingredient_id), " +
                      "CONSTRAINT fk_meal FOREIGN KEY(meal_id) REFERENCES meals(meal_id)" +
                      ");");
      
              statement.executeUpdate("CREATE TABLE IF NOT EXISTS plan (" +
                      "day varchar," +
                      "category varchar," +
                      "meal_id integer, " +
                      "PRIMARY KEY(day, category), " +
                      "CONSTRAINT fk_meal FOREIGN KEY(meal_id) REFERENCES meals(meal_id)" +
                      ");");
      
      
      
      
          }
      
      
      
          @Override
          public int getId(String tableName) {
              int result;
              String entityName = Objects.equals(tableName, "meals") ? "meal_id" : "ingredient_id";
              try (Statement statement = connection.createStatement()) {
                  ResultSet rs = statement.executeQuery("SELECT MAX(" + entityName + ") as max_id FROM " + tableName + ";");
                  rs.next();
                  result = rs.getInt("max_id") + 1;
              } catch (Exception e) {
                  result = 1;
              }
      
              return result;
          }
      
          @Override
          public void addMeal(Meal meal) throws SQLException {
              int mealId = getId("meals");
              Statement statement = connection.createStatement();
              statement.executeUpdate("INSERT INTO meals (meal_id, category, meal) VALUES ("
                      + mealId + ", '"
                      + meal.category + "', '" +
                      meal.name + "');");
              ResultSet rs = statement.executeQuery("SELECT meal_id FROM meals WHERE meal = '" + meal.name + "';");
              rs.next();
      
              for (String s : meal.ingredients) {
                  statement.executeUpdate("INSERT INTO ingredients (ingredient_id, ingredient, meal_id) VALUES ("
                          + getId("ingredients") + ", '"
                          + s + "',"
                          + mealId + ");");
      
              }
      
          }
      
          @Override
          public List<Meal> findByCategory(MealCategory category, boolean orderByName) throws SQLException {
              ArrayList<Meal> meals = new ArrayList<>();
              Statement statement = connection.createStatement();
              String sorting = orderByName ? "ORDER BY meal_name ASC" : "ORDER BY meal_id ASC";
              ResultSet rs = statement.executeQuery("SELECT meal_id, meal_category, meal_name, ingredients " +
                      "FROM meals_view " +
                      "WHERE meal_category = '" + category + "' " +
                      sorting + ";");
      
              while (rs.next()) {
                  Meal meal = new Meal(
                          rs.getString("meal_name"),
                          MealCategory.valueOf(rs.getString("meal_category")),
                          new ArrayList<>(Arrays.asList((String[]) rs.getArray("ingredients").getArray()))
      
                  );
                  meals.add(meal);
              }
              return meals;
          }
      
          @Override
          public List<DayPlan> findAllDayPlan() throws SQLException {
              List<DayPlan> dayplans = new ArrayList<>();
              Statement statement = connection.createStatement();
              ResultSet rs = statement.executeQuery("SELECT day, meal_category, meal_name FROM plan_view;");
              while (rs.next()) {
                  DayOfWeek day = DayOfWeek.valueOf(rs.getString("day"));
                  MealCategory mealCategory = MealCategory.valueOf(rs.getString("meal_category"));
                  String mealName = rs.getString("meal_name");
      
                  DayPlan dayPlan = new DayPlan(day, mealCategory, mealName);
                  dayplans.add(dayPlan);
              }
      
              return dayplans;
          }
      
          @Override
          public void addDayPlan(DayPlan dayplan) throws SQLException {
              Statement statement = connection.createStatement();
              statement.executeUpdate("INSERT INTO plan VALUES ('"
                      + dayplan.day + "', '" + dayplan.mealCategory + "', " + dayplan.meal.id +
                      ");");
      
          }
          @Override
          public void clearDayPlan() throws SQLException {
              Statement statement = connection.createStatement();
              statement.executeUpdate("DELETE FROM plan;");
          }
      
          @Override
          public void dropViews() throws SQLException {
              Statement statement = connection.createStatement();
              statement.executeUpdate("DROP VIEW IF EXISTS meals_view;");
              statement.executeUpdate("DROP VIEW IF EXISTS plan_view;");
      
          }
      
          @Override
          public void createViews() throws SQLException {
              Statement statement = connection.createStatement();
              statement.executeUpdate("CREATE VIEW meals_view AS " +
                      "SELECT " +
                      "m.meal_id, " +
                      "m.category AS meal_category, " +
                      "m.meal AS meal_name, " +
                      "ARRAY_AGG(i.ingredient) as ingredients " +
                      "FROM meals m " +
                      "LEFT JOIN ingredients i ON i.meal_id = m.meal_id " +
                      "GROUP BY 1, 2, 3 " +
                      "ORDER BY 1");
      
              statement.executeUpdate("CREATE VIEW plan_view AS " +
                      "SELECT " +
                      "p.day, " +
                      "p.category AS meal_category, " +
                      "m.meal AS meal_name " +
                      "FROM plan p " +
                      "JOIN meals m ON p.meal_id = m.meal_id");
      
      
          }
      }
    learner_created: true
  - name: src/mealplanner/Planner.java
    visible: true
    text: |-
      package mealplanner;
      
      import java.sql.*;
      import java.util.*;
      
      class Planner {
          PlannerState state;
          Collection<Meal> meals;
      
          DbMealsDao con;
      
          int mealSerial;
          int ingredientSerial;
      
          public Planner(DbMealsDao con) throws SQLException {
              this.state = PlannerState.SHOW_MENU;
              this.meals = new ArrayList<>();
              this.con = con;
      
              this.mealSerial = con.getId("meals");
              this.ingredientSerial = con.getId("ingredients");
      
      
              this.refreshMeals();
          }
      
          public void refreshMeals() throws SQLException {
              this.meals = con.findAll();
          }
          public void setState(PlannerState state) {
              this.state = state;
          }
      
          public void addMeal(Meal meal) throws SQLException {
              con.addMeal(meal);
              this.refreshMeals();
          }
      
          public void printMenu() {
              System.out.println("What would you like to do (add, show, plan, exit)?");
              Scanner scanner = new Scanner(System.in);
              String input = scanner.nextLine();
              switch (input) {
                  case "add" -> this.state = PlannerState.ADD_MEAL;
                  case "show" -> this.state = PlannerState.SHOW_MEALS;
                  case "plan" -> this.state = PlannerState.CREATE_PLAN;
                  case "printplan" -> this.state = PlannerState.SHOW_PLAN;
                  case "exit" -> this.state = PlannerState.EXIT;
                  default -> this.state = PlannerState.SHOW_MENU;
              }
          }
      
          public void inputNewMeal() throws SQLException {
              Scanner scanner = new Scanner(System.in);
      
              System.out.println("Which meal do you want to add (breakfast, lunch, dinner)?");
      
              String preCategory = scanner.nextLine();
              if (!Objects.equals(preCategory, "breakfast") && !Objects.equals(preCategory, "lunch")
                      && !Objects.equals(preCategory, "dinner")) {
                  System.out.println("Wrong meal category! Choose from: breakfast, lunch, dinner.");
                  return;
              }
              MealCategory category = MealCategory.valueOf(preCategory.toUpperCase());
              System.out.println("Input the meal's name:");
              String name = scanner.nextLine();
      
              while (!name.matches("^[a-zA-Z]+(?:\\s+[a-zA-Z]+)*$")) {
                  System.out.println("Wrong format. Use letters only!");
                  name = scanner.nextLine();
              }
      
      
              System.out.println("Input the ingredients:");
              String mealIngredients;
              do {
                  mealIngredients = scanner.nextLine();
                  String[] ingredients = mealIngredients.split(",");
                  boolean isValidIngredients = Meal.verifyIngredients(ingredients);
      
                  if (!isValidIngredients) {
                      System.out.println("Wrong format. Use letters only!");
                  }
              } while (!Meal.verifyIngredients(mealIngredients.split(",")));
      
      
              ArrayList<String> ingredients = new ArrayList<>(Arrays.asList(mealIngredients.split(", ")));
      
              Meal meal = new Meal(name, category, ingredients);
              this.addMeal(meal);
              System.out.println("The meal has been added!");
              this.state = PlannerState.SHOW_MENU;
      
      
          }
      
          public void printMeals(MealCategory selectedCategory) throws SQLException {
              List<Meal> selectedMeals = con.findByCategory(selectedCategory, false);
              if (selectedMeals.isEmpty()) {
                  System.out.println("No meals found.");
              } else {
                  System.out.println("Category: " + selectedCategory.toString().toLowerCase());
                  for (Meal meal : selectedMeals) {
                      meal.printMeal();
                  }
              }
      
          }
      
          public void selectCategoryForPrinting() throws SQLException {
              Scanner scanner = new Scanner(System.in);
              System.out.println("Which category do you want to print (breakfast, lunch, dinner)?");
      
              String preCategory = scanner.nextLine();
              if (!Objects.equals(preCategory, "breakfast") && !Objects.equals(preCategory, "lunch")
                      && !Objects.equals(preCategory, "dinner")) {
                  System.out.println("Wrong meal category! Choose from: breakfast, lunch, dinner.");
                  return;
              }
              MealCategory category = MealCategory.valueOf(preCategory.toUpperCase());
      
              this.printMeals(category);
      
              this.state = PlannerState.SHOW_MENU;
      
      
          }
      
          public void createPlan() throws SQLException {
              con.clearDayPlan();
              Scanner scanner = new Scanner(System.in);
      
              for (DayOfWeek day : DayOfWeek.values()) {
                  System.out.println(day);
                  for (MealCategory mealCategory : MealCategory.values()) {
      
                      List<Meal> selectedMeals = con.findByCategory(mealCategory, true);
                      for (Meal meal : selectedMeals) {
                          System.out.println(meal.getName());
                      }
      
                      System.out.println("Choose the " + mealCategory.toString().toLowerCase()
                              + " for " + day + " from the list above:");
      
                      boolean exitLoop = false;
                      String input = null;
      
                      while (!exitLoop) {
                          input = scanner.nextLine();
                          for (Meal m : meals) {
                              if (Objects.equals(m.name, input)) {
                                  exitLoop = true;
                                  break;
                              }
                          }
      
                          if (!exitLoop) {
                              System.out.println("This meal doesn’t exist. Choose a meal from the list above.");
                          }
      
                      }
      
                      String mealName = input;
      
                      Optional<Meal> optionalMeal = this.meals.stream().filter(m -> Objects.equals(m.name, mealName)).findFirst();
      
                      Meal meal = optionalMeal.get();
      
                      DayPlan dayPlan = new DayPlan(day, meal);
                      con.addDayPlan(dayPlan);
      
                  }
                  System.out.println("Yeah! We planned the meals for " + day + ".");
              }
              this.state = PlannerState.SHOW_PLAN;
          }
      
          public void printPlan() throws SQLException {
              List<DayPlan> dayPlanList = con.findAllDayPlan();
              DayPlan.printDayPlanArray(dayPlanList);
              this.state = PlannerState.SHOW_MENU;
          }
      
          public void action() throws SQLException {
              switch (this.state) {
                  case SHOW_MENU -> printMenu();
                  case ADD_MEAL -> this.inputNewMeal();
                  case SHOW_MEALS -> this.selectCategoryForPrinting();
                  case CREATE_PLAN -> this.createPlan();
                  case SHOW_PLAN -> this.printPlan();
                  case EXIT -> this.setState(PlannerState.EXIT);
              }
          }
      
      }
      
      enum PlannerState {
          SHOW_MENU, ADD_MEAL, SHOW_MEALS, CREATE_PLAN, SHOW_PLAN, EXIT
      }
    learner_created: true
  - name: src/mealplanner/MealsDao.java
    visible: true
    text: |
      package mealplanner;
      
      import java.sql.SQLException;
      import java.util.List;
      
      public interface MealsDao {
          List<Meal> findAll() throws SQLException;
          void createRelations() throws SQLException;
          int getId(String tableName);
          void addMeal(Meal meal) throws SQLException;
          List<Meal> findByCategory(MealCategory category, boolean orderByName) throws SQLException;
          List<DayPlan> findAllDayPlan() throws SQLException;
          void addDayPlan(DayPlan dayplan) throws SQLException;
      
          void clearDayPlan() throws SQLException;
      
          void dropViews() throws SQLException;
          void createViews() throws SQLException;
      
      
      
      
      
      
      }
    learner_created: true
  - name: src/mealplanner/MealCategory.java
    visible: true
    text: |-
      package mealplanner;
      
      public enum MealCategory {
          BREAKFAST, LUNCH, DINNER
      }
    learner_created: true
  - name: plan.txt
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/25576#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Sun, 05 May 2024 12:32:11 UTC"
record: -1
